/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ENPA;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PrioBatchHeader extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6738128397031907421L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PrioBatchHeader\",\"namespace\":\"ENPA\",\"fields\":[{\"name\":\"batch_uuid\",\"type\":\"string\",\"doc\":\"Universal unique identifier to link with data share batch sent to other server(s) participating in the aggregation.\",\"logicalType\":\"uuid\"},{\"name\":\"name\",\"type\":\"string\",\"doc\":\"a name for this specific aggregation\"},{\"name\":\"bins\",\"type\":\"int\",\"doc\":\"number of bins for this aggregation\"},{\"name\":\"epsilon\",\"type\":\"double\",\"doc\":\"differential privacy parameter for local randomization before aggregation.\"},{\"name\":\"prime\",\"type\":\"long\",\"doc\":\"the value of prime p used in aggregation.\",\"default\":4293918721},{\"name\":\"number_of_servers\",\"type\":\"int\",\"doc\":\"the number of servers that will be involved in the aggregation.\",\"default\":2},{\"name\":\"hamming_weight\",\"type\":[\"int\",\"null\"],\"doc\":\"If specified, the hamming weight of the vector will be verified during the validity check on the server.\"},{\"name\":\"batch_start_time\",\"type\":\"long\",\"doc\":\"time range information for the shares in this batch.\"},{\"name\":\"batch_end_time\",\"type\":\"long\",\"doc\":\"time range information for the shares in this batch.\"},{\"name\":\"certificate_hash\",\"type\":\"string\",\"doc\":\"SHA256 hash of BAA certificate.\"},{\"name\":\"signature_of_packets\",\"type\":\"bytes\",\"doc\":\"signature of the avro file of individual shares in this batch.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PrioBatchHeader> ENCODER =
      new BinaryMessageEncoder<PrioBatchHeader>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PrioBatchHeader> DECODER =
      new BinaryMessageDecoder<PrioBatchHeader>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PrioBatchHeader> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PrioBatchHeader> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PrioBatchHeader> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PrioBatchHeader>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PrioBatchHeader to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PrioBatchHeader from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PrioBatchHeader instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PrioBatchHeader fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Universal unique identifier to link with data share batch sent to other server(s) participating in the aggregation. */
   private java.lang.CharSequence batch_uuid;
  /** a name for this specific aggregation */
   private java.lang.CharSequence name;
  /** number of bins for this aggregation */
   private int bins;
  /** differential privacy parameter for local randomization before aggregation. */
   private double epsilon;
  /** the value of prime p used in aggregation. */
   private long prime;
  /** the number of servers that will be involved in the aggregation. */
   private int number_of_servers;
  /** If specified, the hamming weight of the vector will be verified during the validity check on the server. */
   private java.lang.Integer hamming_weight;
  /** time range information for the shares in this batch. */
   private long batch_start_time;
  /** time range information for the shares in this batch. */
   private long batch_end_time;
  /** SHA256 hash of BAA certificate. */
   private java.lang.CharSequence certificate_hash;
  /** signature of the avro file of individual shares in this batch. */
   private java.nio.ByteBuffer signature_of_packets;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PrioBatchHeader() {}

  /**
   * All-args constructor.
   * @param batch_uuid Universal unique identifier to link with data share batch sent to other server(s) participating in the aggregation.
   * @param name a name for this specific aggregation
   * @param bins number of bins for this aggregation
   * @param epsilon differential privacy parameter for local randomization before aggregation.
   * @param prime the value of prime p used in aggregation.
   * @param number_of_servers the number of servers that will be involved in the aggregation.
   * @param hamming_weight If specified, the hamming weight of the vector will be verified during the validity check on the server.
   * @param batch_start_time time range information for the shares in this batch.
   * @param batch_end_time time range information for the shares in this batch.
   * @param certificate_hash SHA256 hash of BAA certificate.
   * @param signature_of_packets signature of the avro file of individual shares in this batch.
   */
  public PrioBatchHeader(java.lang.CharSequence batch_uuid, java.lang.CharSequence name, java.lang.Integer bins, java.lang.Double epsilon, java.lang.Long prime, java.lang.Integer number_of_servers, java.lang.Integer hamming_weight, java.lang.Long batch_start_time, java.lang.Long batch_end_time, java.lang.CharSequence certificate_hash, java.nio.ByteBuffer signature_of_packets) {
    this.batch_uuid = batch_uuid;
    this.name = name;
    this.bins = bins;
    this.epsilon = epsilon;
    this.prime = prime;
    this.number_of_servers = number_of_servers;
    this.hamming_weight = hamming_weight;
    this.batch_start_time = batch_start_time;
    this.batch_end_time = batch_end_time;
    this.certificate_hash = certificate_hash;
    this.signature_of_packets = signature_of_packets;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return batch_uuid;
    case 1: return name;
    case 2: return bins;
    case 3: return epsilon;
    case 4: return prime;
    case 5: return number_of_servers;
    case 6: return hamming_weight;
    case 7: return batch_start_time;
    case 8: return batch_end_time;
    case 9: return certificate_hash;
    case 10: return signature_of_packets;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: batch_uuid = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: bins = (java.lang.Integer)value$; break;
    case 3: epsilon = (java.lang.Double)value$; break;
    case 4: prime = (java.lang.Long)value$; break;
    case 5: number_of_servers = (java.lang.Integer)value$; break;
    case 6: hamming_weight = (java.lang.Integer)value$; break;
    case 7: batch_start_time = (java.lang.Long)value$; break;
    case 8: batch_end_time = (java.lang.Long)value$; break;
    case 9: certificate_hash = (java.lang.CharSequence)value$; break;
    case 10: signature_of_packets = (java.nio.ByteBuffer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'batch_uuid' field.
   * @return Universal unique identifier to link with data share batch sent to other server(s) participating in the aggregation.
   */
  public java.lang.CharSequence getBatchUuid() {
    return batch_uuid;
  }


  /**
   * Sets the value of the 'batch_uuid' field.
   * Universal unique identifier to link with data share batch sent to other server(s) participating in the aggregation.
   * @param value the value to set.
   */
  public void setBatchUuid(java.lang.CharSequence value) {
    this.batch_uuid = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return a name for this specific aggregation
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * a name for this specific aggregation
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'bins' field.
   * @return number of bins for this aggregation
   */
  public int getBins() {
    return bins;
  }


  /**
   * Sets the value of the 'bins' field.
   * number of bins for this aggregation
   * @param value the value to set.
   */
  public void setBins(int value) {
    this.bins = value;
  }

  /**
   * Gets the value of the 'epsilon' field.
   * @return differential privacy parameter for local randomization before aggregation.
   */
  public double getEpsilon() {
    return epsilon;
  }


  /**
   * Sets the value of the 'epsilon' field.
   * differential privacy parameter for local randomization before aggregation.
   * @param value the value to set.
   */
  public void setEpsilon(double value) {
    this.epsilon = value;
  }

  /**
   * Gets the value of the 'prime' field.
   * @return the value of prime p used in aggregation.
   */
  public long getPrime() {
    return prime;
  }


  /**
   * Sets the value of the 'prime' field.
   * the value of prime p used in aggregation.
   * @param value the value to set.
   */
  public void setPrime(long value) {
    this.prime = value;
  }

  /**
   * Gets the value of the 'number_of_servers' field.
   * @return the number of servers that will be involved in the aggregation.
   */
  public int getNumberOfServers() {
    return number_of_servers;
  }


  /**
   * Sets the value of the 'number_of_servers' field.
   * the number of servers that will be involved in the aggregation.
   * @param value the value to set.
   */
  public void setNumberOfServers(int value) {
    this.number_of_servers = value;
  }

  /**
   * Gets the value of the 'hamming_weight' field.
   * @return If specified, the hamming weight of the vector will be verified during the validity check on the server.
   */
  public java.lang.Integer getHammingWeight() {
    return hamming_weight;
  }


  /**
   * Sets the value of the 'hamming_weight' field.
   * If specified, the hamming weight of the vector will be verified during the validity check on the server.
   * @param value the value to set.
   */
  public void setHammingWeight(java.lang.Integer value) {
    this.hamming_weight = value;
  }

  /**
   * Gets the value of the 'batch_start_time' field.
   * @return time range information for the shares in this batch.
   */
  public long getBatchStartTime() {
    return batch_start_time;
  }


  /**
   * Sets the value of the 'batch_start_time' field.
   * time range information for the shares in this batch.
   * @param value the value to set.
   */
  public void setBatchStartTime(long value) {
    this.batch_start_time = value;
  }

  /**
   * Gets the value of the 'batch_end_time' field.
   * @return time range information for the shares in this batch.
   */
  public long getBatchEndTime() {
    return batch_end_time;
  }


  /**
   * Sets the value of the 'batch_end_time' field.
   * time range information for the shares in this batch.
   * @param value the value to set.
   */
  public void setBatchEndTime(long value) {
    this.batch_end_time = value;
  }

  /**
   * Gets the value of the 'certificate_hash' field.
   * @return SHA256 hash of BAA certificate.
   */
  public java.lang.CharSequence getCertificateHash() {
    return certificate_hash;
  }


  /**
   * Sets the value of the 'certificate_hash' field.
   * SHA256 hash of BAA certificate.
   * @param value the value to set.
   */
  public void setCertificateHash(java.lang.CharSequence value) {
    this.certificate_hash = value;
  }

  /**
   * Gets the value of the 'signature_of_packets' field.
   * @return signature of the avro file of individual shares in this batch.
   */
  public java.nio.ByteBuffer getSignatureOfPackets() {
    return signature_of_packets;
  }


  /**
   * Sets the value of the 'signature_of_packets' field.
   * signature of the avro file of individual shares in this batch.
   * @param value the value to set.
   */
  public void setSignatureOfPackets(java.nio.ByteBuffer value) {
    this.signature_of_packets = value;
  }

  /**
   * Creates a new PrioBatchHeader RecordBuilder.
   * @return A new PrioBatchHeader RecordBuilder
   */
  public static ENPA.PrioBatchHeader.Builder newBuilder() {
    return new ENPA.PrioBatchHeader.Builder();
  }

  /**
   * Creates a new PrioBatchHeader RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PrioBatchHeader RecordBuilder
   */
  public static ENPA.PrioBatchHeader.Builder newBuilder(ENPA.PrioBatchHeader.Builder other) {
    if (other == null) {
      return new ENPA.PrioBatchHeader.Builder();
    } else {
      return new ENPA.PrioBatchHeader.Builder(other);
    }
  }

  /**
   * Creates a new PrioBatchHeader RecordBuilder by copying an existing PrioBatchHeader instance.
   * @param other The existing instance to copy.
   * @return A new PrioBatchHeader RecordBuilder
   */
  public static ENPA.PrioBatchHeader.Builder newBuilder(ENPA.PrioBatchHeader other) {
    if (other == null) {
      return new ENPA.PrioBatchHeader.Builder();
    } else {
      return new ENPA.PrioBatchHeader.Builder(other);
    }
  }

  /**
   * RecordBuilder for PrioBatchHeader instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PrioBatchHeader>
    implements org.apache.avro.data.RecordBuilder<PrioBatchHeader> {

    /** Universal unique identifier to link with data share batch sent to other server(s) participating in the aggregation. */
    private java.lang.CharSequence batch_uuid;
    /** a name for this specific aggregation */
    private java.lang.CharSequence name;
    /** number of bins for this aggregation */
    private int bins;
    /** differential privacy parameter for local randomization before aggregation. */
    private double epsilon;
    /** the value of prime p used in aggregation. */
    private long prime;
    /** the number of servers that will be involved in the aggregation. */
    private int number_of_servers;
    /** If specified, the hamming weight of the vector will be verified during the validity check on the server. */
    private java.lang.Integer hamming_weight;
    /** time range information for the shares in this batch. */
    private long batch_start_time;
    /** time range information for the shares in this batch. */
    private long batch_end_time;
    /** SHA256 hash of BAA certificate. */
    private java.lang.CharSequence certificate_hash;
    /** signature of the avro file of individual shares in this batch. */
    private java.nio.ByteBuffer signature_of_packets;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ENPA.PrioBatchHeader.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.batch_uuid)) {
        this.batch_uuid = data().deepCopy(fields()[0].schema(), other.batch_uuid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.bins)) {
        this.bins = data().deepCopy(fields()[2].schema(), other.bins);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.epsilon)) {
        this.epsilon = data().deepCopy(fields()[3].schema(), other.epsilon);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.prime)) {
        this.prime = data().deepCopy(fields()[4].schema(), other.prime);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.number_of_servers)) {
        this.number_of_servers = data().deepCopy(fields()[5].schema(), other.number_of_servers);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.hamming_weight)) {
        this.hamming_weight = data().deepCopy(fields()[6].schema(), other.hamming_weight);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.batch_start_time)) {
        this.batch_start_time = data().deepCopy(fields()[7].schema(), other.batch_start_time);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.batch_end_time)) {
        this.batch_end_time = data().deepCopy(fields()[8].schema(), other.batch_end_time);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.certificate_hash)) {
        this.certificate_hash = data().deepCopy(fields()[9].schema(), other.certificate_hash);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.signature_of_packets)) {
        this.signature_of_packets = data().deepCopy(fields()[10].schema(), other.signature_of_packets);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing PrioBatchHeader instance
     * @param other The existing instance to copy.
     */
    private Builder(ENPA.PrioBatchHeader other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.batch_uuid)) {
        this.batch_uuid = data().deepCopy(fields()[0].schema(), other.batch_uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bins)) {
        this.bins = data().deepCopy(fields()[2].schema(), other.bins);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.epsilon)) {
        this.epsilon = data().deepCopy(fields()[3].schema(), other.epsilon);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.prime)) {
        this.prime = data().deepCopy(fields()[4].schema(), other.prime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.number_of_servers)) {
        this.number_of_servers = data().deepCopy(fields()[5].schema(), other.number_of_servers);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.hamming_weight)) {
        this.hamming_weight = data().deepCopy(fields()[6].schema(), other.hamming_weight);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.batch_start_time)) {
        this.batch_start_time = data().deepCopy(fields()[7].schema(), other.batch_start_time);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.batch_end_time)) {
        this.batch_end_time = data().deepCopy(fields()[8].schema(), other.batch_end_time);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.certificate_hash)) {
        this.certificate_hash = data().deepCopy(fields()[9].schema(), other.certificate_hash);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.signature_of_packets)) {
        this.signature_of_packets = data().deepCopy(fields()[10].schema(), other.signature_of_packets);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'batch_uuid' field.
      * Universal unique identifier to link with data share batch sent to other server(s) participating in the aggregation.
      * @return The value.
      */
    public java.lang.CharSequence getBatchUuid() {
      return batch_uuid;
    }


    /**
      * Sets the value of the 'batch_uuid' field.
      * Universal unique identifier to link with data share batch sent to other server(s) participating in the aggregation.
      * @param value The value of 'batch_uuid'.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder setBatchUuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.batch_uuid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'batch_uuid' field has been set.
      * Universal unique identifier to link with data share batch sent to other server(s) participating in the aggregation.
      * @return True if the 'batch_uuid' field has been set, false otherwise.
      */
    public boolean hasBatchUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'batch_uuid' field.
      * Universal unique identifier to link with data share batch sent to other server(s) participating in the aggregation.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder clearBatchUuid() {
      batch_uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * a name for this specific aggregation
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * a name for this specific aggregation
      * @param value The value of 'name'.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * a name for this specific aggregation
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * a name for this specific aggregation
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bins' field.
      * number of bins for this aggregation
      * @return The value.
      */
    public int getBins() {
      return bins;
    }


    /**
      * Sets the value of the 'bins' field.
      * number of bins for this aggregation
      * @param value The value of 'bins'.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder setBins(int value) {
      validate(fields()[2], value);
      this.bins = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'bins' field has been set.
      * number of bins for this aggregation
      * @return True if the 'bins' field has been set, false otherwise.
      */
    public boolean hasBins() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bins' field.
      * number of bins for this aggregation
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder clearBins() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'epsilon' field.
      * differential privacy parameter for local randomization before aggregation.
      * @return The value.
      */
    public double getEpsilon() {
      return epsilon;
    }


    /**
      * Sets the value of the 'epsilon' field.
      * differential privacy parameter for local randomization before aggregation.
      * @param value The value of 'epsilon'.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder setEpsilon(double value) {
      validate(fields()[3], value);
      this.epsilon = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'epsilon' field has been set.
      * differential privacy parameter for local randomization before aggregation.
      * @return True if the 'epsilon' field has been set, false otherwise.
      */
    public boolean hasEpsilon() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'epsilon' field.
      * differential privacy parameter for local randomization before aggregation.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder clearEpsilon() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'prime' field.
      * the value of prime p used in aggregation.
      * @return The value.
      */
    public long getPrime() {
      return prime;
    }


    /**
      * Sets the value of the 'prime' field.
      * the value of prime p used in aggregation.
      * @param value The value of 'prime'.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder setPrime(long value) {
      validate(fields()[4], value);
      this.prime = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'prime' field has been set.
      * the value of prime p used in aggregation.
      * @return True if the 'prime' field has been set, false otherwise.
      */
    public boolean hasPrime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'prime' field.
      * the value of prime p used in aggregation.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder clearPrime() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'number_of_servers' field.
      * the number of servers that will be involved in the aggregation.
      * @return The value.
      */
    public int getNumberOfServers() {
      return number_of_servers;
    }


    /**
      * Sets the value of the 'number_of_servers' field.
      * the number of servers that will be involved in the aggregation.
      * @param value The value of 'number_of_servers'.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder setNumberOfServers(int value) {
      validate(fields()[5], value);
      this.number_of_servers = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'number_of_servers' field has been set.
      * the number of servers that will be involved in the aggregation.
      * @return True if the 'number_of_servers' field has been set, false otherwise.
      */
    public boolean hasNumberOfServers() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'number_of_servers' field.
      * the number of servers that will be involved in the aggregation.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder clearNumberOfServers() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'hamming_weight' field.
      * If specified, the hamming weight of the vector will be verified during the validity check on the server.
      * @return The value.
      */
    public java.lang.Integer getHammingWeight() {
      return hamming_weight;
    }


    /**
      * Sets the value of the 'hamming_weight' field.
      * If specified, the hamming weight of the vector will be verified during the validity check on the server.
      * @param value The value of 'hamming_weight'.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder setHammingWeight(java.lang.Integer value) {
      validate(fields()[6], value);
      this.hamming_weight = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'hamming_weight' field has been set.
      * If specified, the hamming weight of the vector will be verified during the validity check on the server.
      * @return True if the 'hamming_weight' field has been set, false otherwise.
      */
    public boolean hasHammingWeight() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'hamming_weight' field.
      * If specified, the hamming weight of the vector will be verified during the validity check on the server.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder clearHammingWeight() {
      hamming_weight = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'batch_start_time' field.
      * time range information for the shares in this batch.
      * @return The value.
      */
    public long getBatchStartTime() {
      return batch_start_time;
    }


    /**
      * Sets the value of the 'batch_start_time' field.
      * time range information for the shares in this batch.
      * @param value The value of 'batch_start_time'.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder setBatchStartTime(long value) {
      validate(fields()[7], value);
      this.batch_start_time = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'batch_start_time' field has been set.
      * time range information for the shares in this batch.
      * @return True if the 'batch_start_time' field has been set, false otherwise.
      */
    public boolean hasBatchStartTime() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'batch_start_time' field.
      * time range information for the shares in this batch.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder clearBatchStartTime() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'batch_end_time' field.
      * time range information for the shares in this batch.
      * @return The value.
      */
    public long getBatchEndTime() {
      return batch_end_time;
    }


    /**
      * Sets the value of the 'batch_end_time' field.
      * time range information for the shares in this batch.
      * @param value The value of 'batch_end_time'.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder setBatchEndTime(long value) {
      validate(fields()[8], value);
      this.batch_end_time = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'batch_end_time' field has been set.
      * time range information for the shares in this batch.
      * @return True if the 'batch_end_time' field has been set, false otherwise.
      */
    public boolean hasBatchEndTime() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'batch_end_time' field.
      * time range information for the shares in this batch.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder clearBatchEndTime() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'certificate_hash' field.
      * SHA256 hash of BAA certificate.
      * @return The value.
      */
    public java.lang.CharSequence getCertificateHash() {
      return certificate_hash;
    }


    /**
      * Sets the value of the 'certificate_hash' field.
      * SHA256 hash of BAA certificate.
      * @param value The value of 'certificate_hash'.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder setCertificateHash(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.certificate_hash = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'certificate_hash' field has been set.
      * SHA256 hash of BAA certificate.
      * @return True if the 'certificate_hash' field has been set, false otherwise.
      */
    public boolean hasCertificateHash() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'certificate_hash' field.
      * SHA256 hash of BAA certificate.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder clearCertificateHash() {
      certificate_hash = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'signature_of_packets' field.
      * signature of the avro file of individual shares in this batch.
      * @return The value.
      */
    public java.nio.ByteBuffer getSignatureOfPackets() {
      return signature_of_packets;
    }


    /**
      * Sets the value of the 'signature_of_packets' field.
      * signature of the avro file of individual shares in this batch.
      * @param value The value of 'signature_of_packets'.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder setSignatureOfPackets(java.nio.ByteBuffer value) {
      validate(fields()[10], value);
      this.signature_of_packets = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'signature_of_packets' field has been set.
      * signature of the avro file of individual shares in this batch.
      * @return True if the 'signature_of_packets' field has been set, false otherwise.
      */
    public boolean hasSignatureOfPackets() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'signature_of_packets' field.
      * signature of the avro file of individual shares in this batch.
      * @return This builder.
      */
    public ENPA.PrioBatchHeader.Builder clearSignatureOfPackets() {
      signature_of_packets = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PrioBatchHeader build() {
      try {
        PrioBatchHeader record = new PrioBatchHeader();
        record.batch_uuid = fieldSetFlags()[0] ? this.batch_uuid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.bins = fieldSetFlags()[2] ? this.bins : (java.lang.Integer) defaultValue(fields()[2]);
        record.epsilon = fieldSetFlags()[3] ? this.epsilon : (java.lang.Double) defaultValue(fields()[3]);
        record.prime = fieldSetFlags()[4] ? this.prime : (java.lang.Long) defaultValue(fields()[4]);
        record.number_of_servers = fieldSetFlags()[5] ? this.number_of_servers : (java.lang.Integer) defaultValue(fields()[5]);
        record.hamming_weight = fieldSetFlags()[6] ? this.hamming_weight : (java.lang.Integer) defaultValue(fields()[6]);
        record.batch_start_time = fieldSetFlags()[7] ? this.batch_start_time : (java.lang.Long) defaultValue(fields()[7]);
        record.batch_end_time = fieldSetFlags()[8] ? this.batch_end_time : (java.lang.Long) defaultValue(fields()[8]);
        record.certificate_hash = fieldSetFlags()[9] ? this.certificate_hash : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.signature_of_packets = fieldSetFlags()[10] ? this.signature_of_packets : (java.nio.ByteBuffer) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PrioBatchHeader>
    WRITER$ = (org.apache.avro.io.DatumWriter<PrioBatchHeader>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PrioBatchHeader>
    READER$ = (org.apache.avro.io.DatumReader<PrioBatchHeader>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.batch_uuid);

    out.writeString(this.name);

    out.writeInt(this.bins);

    out.writeDouble(this.epsilon);

    out.writeLong(this.prime);

    out.writeInt(this.number_of_servers);

    if (this.hamming_weight == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.hamming_weight);
    }

    out.writeLong(this.batch_start_time);

    out.writeLong(this.batch_end_time);

    out.writeString(this.certificate_hash);

    out.writeBytes(this.signature_of_packets);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.batch_uuid = in.readString(this.batch_uuid instanceof Utf8 ? (Utf8)this.batch_uuid : null);

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.bins = in.readInt();

      this.epsilon = in.readDouble();

      this.prime = in.readLong();

      this.number_of_servers = in.readInt();

      if (in.readIndex() != 0) {
        in.readNull();
        this.hamming_weight = null;
      } else {
        this.hamming_weight = in.readInt();
      }

      this.batch_start_time = in.readLong();

      this.batch_end_time = in.readLong();

      this.certificate_hash = in.readString(this.certificate_hash instanceof Utf8 ? (Utf8)this.certificate_hash : null);

      this.signature_of_packets = in.readBytes(this.signature_of_packets);

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.batch_uuid = in.readString(this.batch_uuid instanceof Utf8 ? (Utf8)this.batch_uuid : null);
          break;

        case 1:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 2:
          this.bins = in.readInt();
          break;

        case 3:
          this.epsilon = in.readDouble();
          break;

        case 4:
          this.prime = in.readLong();
          break;

        case 5:
          this.number_of_servers = in.readInt();
          break;

        case 6:
          if (in.readIndex() != 0) {
            in.readNull();
            this.hamming_weight = null;
          } else {
            this.hamming_weight = in.readInt();
          }
          break;

        case 7:
          this.batch_start_time = in.readLong();
          break;

        case 8:
          this.batch_end_time = in.readLong();
          break;

        case 9:
          this.certificate_hash = in.readString(this.certificate_hash instanceof Utf8 ? (Utf8)this.certificate_hash : null);
          break;

        case 10:
          this.signature_of_packets = in.readBytes(this.signature_of_packets);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










